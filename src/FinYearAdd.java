
import models.Contact;
import database.DatabaseConnection;
import database.DatabaseUtils;
import helper.IO;
import helper.TransferWorker;
import helper.Validator;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author gorma
 */
public class FinYearAdd extends javax.swing.JFrame {

    private final String host;
    private final String port;
    private final String username;
    private final String password;
    
    private final DatabaseConnection dbc;
    private final DatabaseUtils dbUtil = new DatabaseUtils();

    /**
     * Creates new form FinYearAdd
     */
    public FinYearAdd() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 4 - this.getSize().width / 4, dim.height / 4 - this.getSize().height / 4);

        initComponents();
        this.host = System.getenv("MYSQL_HOST");
        this.port = System.getenv("MYSQL_PORT");
        this.username = System.getenv("MYSQL_USERNAME");
        this.password = System.getenv("MYSQL_PASSWORD");
        
        System.out.println(this.host + " : " + this.port);
        
        dbc = new DatabaseConnection(
                this.host + ":" + this.port, 
                this.username, 
                this.password);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pbTransferProgress = new javax.swing.JProgressBar();
        btAddYear = new javax.swing.JButton();
        lStatus = new javax.swing.JLabel();
        tfFromDB = new javax.swing.JTextField();
        tfToDB = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FINANCE_YEAR_ADD");

        btAddYear.setText("Add Year");
        btAddYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddYearActionPerformed(evt);
            }
        });

        lStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tfFromDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfFromDBActionPerformed(evt);
            }
        });

        jLabel2.setText("From:");

        jLabel3.setText("To:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(btAddYear, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfFromDB)
                            .addComponent(tfToDB, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))))
                .addContainerGap(314, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pbTransferProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(133, 133, 133))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFromDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfToDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addComponent(lStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAddYear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pbTransferProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void createNewDatabase(String db) {
        
        String createDB = "CREATE DATABASE " + db;
        int result = dbc.executeUpdate(createDB, "");
        
        if (result >= 0) {
            String print = "Database created : " + db;
            IO.print(print, this.lStatus);
        } else {
            String print = "Could not create database : " + db;
            IO.print(print, this.lStatus);
        }
        dbc.closeConnection(db);
    }
    
    private void dumpDatabase(String fromDB, String toDB) {
        this.dbUtil.dumpDatabase(
                this.username, 
                this.password, 
                fromDB, 
                toDB, 
                this.lStatus);
    }
    
    private List<String> fetchDatabases() {
        List<String> dbs = new ArrayList<>();
        try {
            String fetchDBs = "SHOW DATABASES";
            ResultSet rs = dbc.executeQuery(fetchDBs, "");
            while(rs.next()) {
                dbs.add(rs.getString(1));
            }
            dbc.closeConnection("");
        } catch (SQLException ex) {
            Logger.getLogger(FinYearAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        return dbs;
    }
    
    private List<Contact> getContactIds(String db) {
        List<Contact> contacts = new ArrayList<>();
        try {
            
            ResultSet rs = dbc.executeQuery("SELECT * FROM contact", db);
            
            while (rs.next()) {
                Contact contact = new Contact(rs.getInt(1), rs.getString("name"), rs.getDouble("ob"));
                contacts.add(contact);
            }
            dbc.closeConnection(db);
        } catch (SQLException ex) {
            Logger.getLogger(FinYearAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
        return contacts;
    }
    
    
    
    public void startTransfer(List<Contact> contacts, String fromDB, String toDB) {
        TransferWorker tw = new TransferWorker(fromDB, toDB, contacts, dbc, lStatus, pbTransferProgress, btAddYear);
  
        // Executes the swingworker on worker thread 
        tw.execute(); 
    }
    
    private void btAddYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddYearActionPerformed
        String fromDB = this.tfFromDB.getText();
        String toDB = this.tfToDB.getText();

        List<String> dbs = this.fetchDatabases();
        
        if (!Validator.validateDBName(fromDB, this.lStatus)
                || !Validator.validateDBName(toDB, this.lStatus)) {
            return;
        }
        
        if (dbs.contains(toDB)) {
            IO.print("Database already created, Pleas drop manually! " + toDB, this.lStatus);
        } else if (!dbs.contains(fromDB)) {
            IO.print("Database not found! " + fromDB, this.lStatus);
        }
        else {
            this.createNewDatabase(toDB);
            this.dumpDatabase(fromDB, toDB);
            
            List<Contact> contacts = this.getContactIds(toDB);
        
            this.pbTransferProgress.setMinimum(0);
            this.pbTransferProgress.setMaximum(contacts.size());

            this.btAddYear.setEnabled(false);
            
            dbUtil.truncateTables(toDB, dbc);
            this.startTransfer(contacts, fromDB, toDB);
            
            
        }

    }//GEN-LAST:event_btAddYearActionPerformed

    private void tfFromDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfFromDBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfFromDBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinYearAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinYearAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinYearAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinYearAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinYearAdd().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddYear;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lStatus;
    private javax.swing.JProgressBar pbTransferProgress;
    private javax.swing.JTextField tfFromDB;
    private javax.swing.JTextField tfToDB;
    // End of variables declaration//GEN-END:variables
}
